Ym <- EchoStateNet::predict(matth, U =as.matrix(testData),generative = FALSE,genNum = 0)
plot(Ym,type = 'l')
###############################################################
df <- as.data.frame(cbind(input,output,c(1:100)))
names(df) <- c("input","output","index")
ggplot(df,aes(x = index,y = input)) +
geom_line() +
geom_line(aes(x =index,y = output),colour = "green")
plot(Ym,type = 'l')
#Sinewave generator
install.packages('ggplot2')
library(ggplot2)
install.packages('gridExtra')
devtools::install_github("matthiasadriaens/EchoStateNet")
require(gridExtra)
library(EchoStateNet)
rm(list = ls())
set.seed(100)
# Generate a sin wave with frequency controlled by a step function
x          <- seq(0, 10*pi, length.out = 500)
trainData  <- matrix(c(rep(0.5,500), rep(0.5,500), rep(1,500)), ncol = 1)
targetData <- matrix(c(sin(x), sin(x), sin(2*x)), ncol = 1)
testData   <- matrix(c(rep(.5,300), rep(.5,300), rep(1,300)), ncol = 1)
###############################################################
matth <- createESN(leaking.rate = 0.55,
lambda = 1.25,
n.neurons = 1000,
wash.out = 0,
feedback = FALSE,
regCoef = 0.025,
resCon = 1,
U = as.matrix(trainData),
Y = as.matrix(targetData))
matth <- EchoStateNet::train(matth)
Ym <- EchoStateNet::predict(matth, U =as.matrix(testData),generative = FALSE,genNum = 0)
plot(Ym,type = 'l')
###############################################################
df <- as.data.frame(cbind(input,output,c(1:100)))
names(df) <- c("input","output","index")
ggplot(df,aes(x = index,y = input)) +
geom_line() +
geom_line(aes(x =index,y = output),colour = "green")
install.packages("ggplot2")
plot(Ym,type = 'l')
testData   <- matrix(c(rep(1,500), rep(1,300), rep(0.5,300)), ncol = 1)
Ym <- EchoStateNet::predict(matth, U =as.matrix(testData),generative = FALSE,genNum = 0)
plot(Ym,type = 'l')
plot(targetData)
plot(trainData)
rm(list = ls())
set.seed(100)
# Generate a sin wave with frequency controlled by a step function
x          <- seq(0, 10*pi, length.out = 500)
trainData  <- matrix(c(rep(0.5,500), rep(0.5,500), rep(1,500)), ncol = 1)
targetData <- matrix(c(sin(x), sin(x), sin(2*x)), ncol = 1)
testData   <- matrix(c(rep(1,500), rep(1,300), rep(0.5,300)), ncol = 1)
###############################################################
matth <- createESN(leaking.rate = 0.55,
lambda = 0.1,
n.neurons = 1000,
wash.out = 0,
feedback = FALSE,
regCoef = 0.025,
resCon = 1,
U = as.matrix(trainData),
Y = as.matrix(targetData))
matth <- EchoStateNet::train(matth)
Ym <- EchoStateNet::predict(matth, U =as.matrix(testData),generative = FALSE,genNum = 0)
plot(Ym,type = 'l')
rm(list = ls())
set.seed(100)
# Generate a sin wave with frequency controlled by a step function
x          <- seq(0, 10*pi, length.out = 500)
trainData  <- matrix(c(rep(0.5,500), rep(0.5,500), rep(1,500)), ncol = 1)
targetData <- matrix(c(sin(x), sin(x), sin(2*x)), ncol = 1)
testData   <- matrix(c(rep(1,500), rep(1,300), rep(0.5,300)), ncol = 1)
###############################################################
matth <- createESN(leaking.rate = 0.55,
lambda = 0.5,
n.neurons = 1000,
wash.out = 0,
feedback = FALSE,
regCoef = 0.025,
resCon = 1,
U = as.matrix(trainData),
Y = as.matrix(targetData))
matth <- EchoStateNet::train(matth)
Ym <- EchoStateNet::predict(matth, U =as.matrix(testData),generative = FALSE,genNum = 0)
plot(Ym,type = 'l')
rm(list = ls())
set.seed(100)
# Generate a sin wave with frequency controlled by a step function
x          <- seq(0, 10*pi, length.out = 500)
trainData  <- matrix(c(rep(0.5,500), rep(0.5,500), rep(1,500)), ncol = 1)
targetData <- matrix(c(sin(x), sin(x), sin(2*x)), ncol = 1)
testData   <- matrix(c(rep(1,500), rep(1,300), rep(0.5,300)), ncol = 1)
###############################################################
matth <- createESN(leaking.rate = 0.55,
lambda = 0.7,
n.neurons = 1000,
wash.out = 0,
feedback = FALSE,
regCoef = 0.025,
resCon = 1,
U = as.matrix(trainData),
Y = as.matrix(targetData))
matth <- EchoStateNet::train(matth)
Ym <- EchoStateNet::predict(matth, U =as.matrix(testData),generative = FALSE,genNum = 0)
plot(Ym,type = 'l')
rm(list = ls())
set.seed(100)
# Generate a sin wave with frequency controlled by a step function
x          <- seq(0, 10*pi, length.out = 500)
trainData  <- matrix(c(rep(0.5,500), rep(0.5,500), rep(1,500)), ncol = 1)
targetData <- matrix(c(sin(x), sin(x), sin(2*x)), ncol = 1)
testData   <- matrix(c(rep(1,500), rep(1,300), rep(0.5,300)), ncol = 1)
###############################################################
matth <- createESN(leaking.rate = 0.55,
lambda = 1,
n.neurons = 1000,
wash.out = 0,
feedback = FALSE,
regCoef = 0.025,
resCon = 1,
U = as.matrix(trainData),
Y = as.matrix(targetData))
matth <- EchoStateNet::train(matth)
Ym <- EchoStateNet::predict(matth, U =as.matrix(testData),generative = FALSE,genNum = 0)
plot(Ym,type = 'l')
rm(list = ls())
set.seed(100)
# Generate a sin wave with frequency controlled by a step function
x          <- seq(0, 10*pi, length.out = 500)
trainData  <- matrix(c(rep(0.5,500), rep(0.5,500), rep(1,500)), ncol = 1)
targetData <- matrix(c(sin(x), sin(x), sin(2*x)), ncol = 1)
testData   <- matrix(c(rep(1,500), rep(1,300), rep(0.5,300)), ncol = 1)
###############################################################
matth <- createESN(leaking.rate = 0.55,
lambda = 0.85,
n.neurons = 1000,
wash.out = 0,
feedback = FALSE,
regCoef = 0.025,
resCon = 1,
U = as.matrix(trainData),
Y = as.matrix(targetData))
matth <- EchoStateNet::train(matth)
Ym <- EchoStateNet::predict(matth, U =as.matrix(testData),generative = FALSE,genNum = 0)
plot(Ym,type = 'l')
setwd("C:/Users/matth/OneDrive/Desktop/thesis/R/data")
rm(list = ls())
set.seed(42)
# load the data
trainLen = 2000
testLen = 2000
initLen = 100
data = as.matrix(read.table('MackeyGlass_t17.txt'))
u = as.matrix(data[1:trainLen])
Yt = matrix(data[2:(trainLen+1)])
devtools::install_github("matthiasadriaens/EchoStateNet")
library(EchoStateNet)
library(ggplot2)
net <-   createESN(leaking.rate = 0.35,
lambda = 1.25,
n.neurons = 1000,
wash.out = 100,
feedback = FALSE,
regCoef = 1e-8,
resCon = 1,
U = u,
Y = Yt)
net <- EchoStateNet::train(net)
to.predict <- as.matrix(data[(trainLen+3):2501])
Yp <- EchoStateNet::predict(net,
U =to.predict,
generative = TRUE,
genNum = 1000)
Y <- as.matrix(data[(trainLen+3):3003])
df <- as.data.frame(cbind(Yp,Y,1:1001))
names(df) <- c("Yp","Yt","index")
ggplot(df,aes(x = index,y = Yp)) +
geom_line() +
geom_line(aes(x = index,y = Yt), colour = 'red') +
labs(x = "Index", y = "True and predicted signal",title = "ESN Mackey-Glass prediction (washout = 0)")
setwd("C:/Users/matth/OneDrive/Desktop/thesis/R/data")
rm(list = ls())
set.seed(42)
# load the data
trainLen = 2000
testLen = 2000
initLen = 100
data = as.matrix(read.table('MackeyGlass_t17.txt'))
u = as.matrix(data[1:trainLen])
Yt = matrix(data[2:(trainLen+1)])
devtools::install_github("matthiasadriaens/EchoStateNet")
library(EchoStateNet)
library(ggplot2)
net <-   createESN(leaking.rate = 0.35,
lambda = 1.25,
n.neurons = 1000,
wash.out = 0,
feedback = FALSE,
regCoef = 1e-8,
resCon = 1,
U = u,
Y = Yt)
net <- EchoStateNet::train(net)
to.predict <- as.matrix(data[(trainLen+3):2501])
Yp <- EchoStateNet::predict(net,
U =to.predict,
generative = TRUE,
genNum = 2000)
Y <- as.matrix(data[(trainLen+3):4003])
df <- as.data.frame(cbind(Yp,Y,1:2001))
names(df) <- c("Yp","Yt","index")
ggplot(df,aes(x = index,y = Yp)) +
geom_line() +
geom_line(aes(x = index,y = Yt), colour = 'red') +
labs(x = "Index", y = "True and predicted signal",title = "ESN Mackey-Glass prediction (washout = 0)")
setwd("C:/Users/matth/OneDrive/Desktop/thesis/R/data")
rm(list = ls())
set.seed(42)
# load the data
trainLen = 2000
testLen = 2000
initLen = 100
data = as.matrix(read.table('MackeyGlass_t17.txt'))
u = as.matrix(data[1:trainLen])
Yt = matrix(data[2:(trainLen+1)])
devtools::install_github("matthiasadriaens/EchoStateNet")
library(EchoStateNet)
library(ggplot2)
net <-   createESN(leaking.rate = 0.35,
lambda = 1.25,
n.neurons = 1000,
wash.out = 100,
feedback = FALSE,
regCoef = 1e-8,
resCon = 1,
U = u,
Y = Yt)
net <- EchoStateNet::train(net)
to.predict <- as.matrix(data[(trainLen+3):2501])
Yp <- EchoStateNet::predict(net,
U =to.predict,
generative = TRUE,
genNum = 2000)
Y <- as.matrix(data[(trainLen+3):4003])
df <- as.data.frame(cbind(Yp,Y,1:2001))
names(df) <- c("Yp","Yt","index")
ggplot(df,aes(x = index,y = Yp)) +
geom_line() +
geom_line(aes(x = index,y = Yt), colour = 'red') +
labs(x = "Index", y = "True and predicted signal",title = "ESN Mackey-Glass prediction (washout = 0)")
setwd("C:/Users/matth/OneDrive/Desktop/thesis/R/data")
rm(list = ls())
set.seed(42)
# load the data
trainLen = 2000
testLen = 2000
initLen = 100
data = as.matrix(read.table('MackeyGlass_t17.txt'))
u = as.matrix(data[1:trainLen])
Yt = matrix(data[2:(trainLen+1)])
devtools::install_github("matthiasadriaens/EchoStateNet")
library(EchoStateNet)
library(ggplot2)
net <-   createESN(leaking.rate = 0.35,
lambda = 1.25,
n.neurons = 1000,
wash.out = 0,
feedback = FALSE,
regCoef = 1e-8,
resCon = 1,
U = u,
Y = Yt)
net <- EchoStateNet::train(net)
to.predict <- as.matrix(data[(trainLen+3):2501])
Yp <- EchoStateNet::predict(net,
U =to.predict,
generative = TRUE,
genNum = 2000)
Y <- as.matrix(data[(trainLen+3):4003])
df <- as.data.frame(cbind(Yp,Y,1:2001))
names(df) <- c("Yp","Yt","index")
ggplot(df,aes(x = index,y = Yp)) +
geom_line() +
geom_line(aes(x = index,y = Yt), colour = 'red') +
labs(x = "Index", y = "True and predicted signal",title = "ESN Mackey-Glass prediction (washout = 0)")
setwd("C:/Users/matth/OneDrive/Desktop/thesis/R/data")
rm(list = ls())
set.seed(42)
# load the data
trainLen = 2000
testLen = 2000
initLen = 100
data = as.matrix(read.table('MackeyGlass_t17.txt'))
u = as.matrix(data[1:trainLen])
Yt = matrix(data[2:(trainLen+1)])
devtools::install_github("matthiasadriaens/EchoStateNet")
library(EchoStateNet)
library(ggplot2)
net <-   createESN(leaking.rate = 0.35,
lambda = 1.25,
n.neurons = 1000,
wash.out = 100,
feedback = FALSE,
regCoef = 1e-8,
resCon = 1,
U = u,
Y = Yt)
net <- EchoStateNet::train(net)
to.predict <- as.matrix(data[(trainLen+3):2501])
Yp <- EchoStateNet::predict(net,
U =to.predict,
generative = TRUE,
genNum = 2000)
Y <- as.matrix(data[(trainLen+3):4003])
df <- as.data.frame(cbind(Yp,Y,1:2001))
names(df) <- c("Yp","Yt","index")
ggplot(df,aes(x = index,y = Yp)) +
geom_line() +
geom_line(aes(x = index,y = Yt), colour = 'red') +
labs(x = "Index", y = "True and predicted signal",title = "ESN Mackey-Glass prediction (washout = 0)")
ggplot(df,aes(x = index,y = Yp)) +
geom_line() +
geom_line(aes(x = index,y = Yt), colour = 'red') +
labs(x = "Index",
y = "True and predicted signal",
title = "ESN Mackey-Glass prediction") +
scale_colour_manual("",
breaks = c("TempMax", "TempMedia"),
values = c("red", "green"))
ggplot(df,aes(x = index,y = Yp)) +
geom_line() +
geom_line(aes(x = index,y = Yt), colour = 'TempaMax') +
labs(x = "Index",
y = "True and predicted signal",
title = "ESN Mackey-Glass prediction") +
scale_colour_manual("",
breaks = c("TempMax", "TempMedia"),
values = c("red", "green"))
ggplot(df,aes(x = index,y = Yp)) +
geom_line() +
geom_line(aes(x = index,y = Yt), colour = 'Red') +
labs(x = "Index",
y = "True and predicted signal",
title = "ESN Mackey-Glass prediction")
scale_colour_manual(values=c("red","green","blue")
)
ggplot(df,aes(x = index,y = Yp)) +
geom_line() +
geom_line(aes(x = index,y = Yt), colour = 'Red') +
labs(x = "Index",
y = "True and predicted signal",
title = "ESN Mackey-Glass prediction") +
scale_colour_manual(values=c("red","green","blue"))
?labs
ggplot(df,aes(x = index,y = Yp)) +
geom_line() +
geom_line(aes(x = index,y = Yt), colour = 'Red') +
labs(x = "Index",
y = "True and predicted signal",
title = "ESN Mackey-Glass prediction") +
scale_color_discrete(name = "Y series", labels = c("Y2", "Y1"))
labs(x = "Index",
y = "True and predicted signal",
title = "ESN Mackey-Glass prediction")
labs(x = "Index",
y = "True and predicted signal",
title = "ESN Mackey-Glass prediction")
ggplot(df,aes(x = index,y = Yp)) +
geom_line() +
geom_line(aes(x = index,y = Yt,colour = 'Red')) +
labs(x = "Index",
y = "True and predicted signal",
title = "ESN Mackey-Glass prediction")
ggplot(df,aes(x = index,y = Yp,colour = "Lalal")) +
geom_line() +
geom_line(aes(x = index,y = Yt,colour = 'Red')) +
labs(x = "Index",
y = "True and predicted signal",
title = "ESN Mackey-Glass prediction")
ggplot(df,aes(x = index,y = Yp,colour = "Black")) +
geom_line() +
geom_line(aes(x = index,y = Yt,colour = 'Red')) +
labs(x = "Index",
y = "True and predicted signal",
title = "ESN Mackey-Glass prediction")
ggplot(df,aes(x = index,y = Yp,colour = "Predicted signal")) +
geom_line() +
geom_line(aes(x = index,y = Yt,colour = 'Targeted signal')) +
labs(x = "Index",
y = "True and predicted signal",
title = "ESN Mackey-Glass prediction")
ggplot(df,aes(x = index,y = Yp,colour = "Predicted signal")) +
geom_line() +
geom_line(aes(x = index,y = Yt,colour = 'Targeted signal'),size=1.5) +
labs(x = "Index",
y = "True and predicted signal",
title = "ESN Mackey-Glass prediction")
ggplot(df,aes(x = index,y = Yp,colour = "Predicted signal")) +
geom_line() +
geom_line(aes(x = index,y = Yt,colour = 'Targeted signal'),size=1) +
labs(x = "Index",
y = "True and predicted signal",
title = "ESN Mackey-Glass prediction")
ggplot(df,aes(x = index,y = Yp,colour = "Predicted signal"),size = 1) +
geom_line() +
geom_line(aes(x = index,y = Yt,colour = 'Targeted signal'),size=1) +
labs(x = "Index",
y = "True and predicted signal",
title = "ESN Mackey-Glass prediction")
ggplot(df,aes(x = index,y = Yp,colour = "Predicted signal"),size = 1) +
geom_line() +
geom_line(aes(x = index,y = Yt,colour = 'Targeted signal'),size=1) +
labs(x = "Index",
y = "Targeted and predicted signal",
title = "ESN Mackey-Glass prediction") +
scale_color_discrete(name = "Signals", labels = c("Y2", "Y1"))
ggplot(df,aes(x = index,y = Yp,colour = "black"),size = 1) +
geom_line() +
geom_line(aes(x = index,y = Yt,colour = 'Targeted signal'),size=1) +
labs(x = "Index",
y = "Targeted and predicted signal",
title = "ESN Mackey-Glass prediction") +
scale_color_discrete(name = "Signals", labels = c("Predicted signal", "Targeted signal"))
ggplot(df,aes(x = index,y = Yp,color = "black"),size = 1) +
geom_line() +
geom_line(aes(x = index,y = Yt,colour = 'Targeted signal'),size=1) +
labs(x = "Index",
y = "Targeted and predicted signal",
title = "ESN Mackey-Glass prediction") +
scale_color_discrete(name = "Signals", labels = c("Predicted signal", "Targeted signal"))
setwd("C:/Users/matth/OneDrive/Desktop/thesis/R/data")
rm(list = ls())
set.seed(42)
# load the data
trainLen = 2000
testLen = 2000
initLen = 100
setwd("C:/Users/matth/OneDrive/Desktop/thesis/R/data")
install.packages('ggplot2')
devtools::install_github("matthiasadriaens/EchoStateNet")
library(EchoStateNet)
library(ggplot2)
rm(list = ls())
set.seed(42)
# load the data
trainLen = 2000
testLen = 2000
initLen = 100
install.packages("ggplot2")
data = as.matrix(read.table('MackeyGlass_t17.txt'))
setwd("C:/Users/matth/OneDrive/Desktop/thesis/R/data")
data = as.matrix(read.table('MackeyGlass_t17.txt'))
setwd("C:/Users/matth/OneDrive/Desktop/thesis/R/data")
data = as.matrix(read.table('MackeyGlass_t17.txt'))
#Inputmatrix
u = as.matrix(data[1:trainLen])
#Outputmatrix
Yt = matrix(data[2:(trainLen+1)])
net <-   createESN(leaking.rate = 0.35,
lambda = 1.25,
n.neurons = 1000,
wash.out = 100,
feedback = FALSE,
regCoef = 1e-8,
resCon = 1,
U = u,
Y = Yt)
library(EchoStateNet)
net <-   createESN(leaking.rate = 0.35,
lambda = 1.25,
n.neurons = 1000,
wash.out = 100,
feedback = FALSE,
regCoef = 1e-8,
resCon = 1,
U = u,
Y = Yt)
net <- EchoStateNet::train(net)
to.predict <- as.matrix(data[(trainLen+3):2501])
Yp <- EchoStateNet::predict(net,
U =to.predict,
generative = TRUE,
genNum = 2000)
Y <- as.matrix(data[(trainLen+3):4003])
df <- as.data.frame(cbind(Yp,Y,1:2001))
names(df) <- c("Yp","Yt","index")
ggplot(df,aes(x = index,y = Yp,colour = "black"),size = 1) +
geom_line() +
geom_line(aes(x = index,y = Yt,colour = 'Targeted signal'),size=1) +
labs(x = "Index",
y = "Targeted and predicted signal",
title = "ESN Mackey-Glass prediction") +
scale_color_discrete(name = "Signals", labels = c("Predicted signal", "Targeted signal"))
library(ggplot2)
Y <- as.matrix(data[(trainLen+3):4003])
df <- as.data.frame(cbind(Yp,Y,1:2001))
names(df) <- c("Yp","Yt","index")
ggplot(df,aes(x = index,y = Yp,colour = "black"),size = 1) +
geom_line() +
geom_line(aes(x = index,y = Yt,colour = 'Targeted signal'),size=1) +
labs(x = "Index",
y = "Targeted and predicted signal",
title = "ESN Mackey-Glass prediction") +
scale_color_discrete(name = "Signals", labels = c("Predicted signal", "Targeted signal"))
net <- EchoStateNet::train(net)
install.packages('ggplot2')
devtools::install_github("matthiasadriaens/EchoStateNet")
install.packages("ggplot2")
