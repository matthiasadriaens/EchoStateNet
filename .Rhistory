install.packages('ggplot2')
devtools::install_github("matthiasadriaens/EchoStateNet")
install.packages("ggplot2")
library(ggplot2)
devtools::install_github("matthiasadriaens/EchoStateNet")
library(EchoStateNet)
require(data.table) ## 1.9.2
setwd("C:/Users/matth/OneDrive/Desktop/thesis/R/data/nasa")
#Reading in C-MAPSS data
varnames <- c("Unit number","Time in cycles","Operational setting 1","Operatinal setting 2","Operational setting 3","Sensor 1","Sensor 2","Sensor 3","Sensor 4","Sensor 5","Sensor 6","Sensor 7","Sensor 8","Sensor 9","Sensor 10","Sensor 11","Sensor 12","Sensor 13","Sensor 14","Sensor 15","Sensor 16","Sensor 17","Sensor 18","Sensor 19","Sensor 20","Sensor 21")
RULnames <- c("RUL")
set1 <- list(train = read.table("train_FD001.txt",col.names = varnames),
test = read.table("test_FD001.txt",col.names = varnames),
RUL= read.table("RUL_FD001.txt",col.names = RULnames))
RUL <- cbind(1:nrow(set1[["RUL"]]), set1[["RUL"]])
names(RUL) <- c("Unit.number","RUL")
test_RUL <- merge(set1[["test"]],RUL,by="Unit.number")
set1[["test_RUL"]] <- test_RUL
#Calculating the remaining usefull life variable
data_train_rul <- set1[["train"]]
data_test_rul <- set1[["test"]]
data_rul <- set1[["RUL"]]
#Get RUL (=max cycles)
data_aggreg <- aggregate(data_train_rul$Time.in.cycles,by = list(data_train_rul$Unit.number), FUN = max)
names(data_aggreg) <- c("Unit.number","cycle.max")
data_aggreg_test <- aggregate(data_test_rul$Time.in.cycles,by = list(data_test_rul$Unit.number), FUN = max)
#The max cycle is this max plus the remaining life (hence that this the test set is)
data_aggreg_test <- cbind(data_aggreg_test,data_rul)
names(data_aggreg_test) <- c("Unit.number","cycle.max","RUL")
data_aggreg_test$max <- (data_aggreg_test$cycle.max + data_aggreg_test$RUL)
#clean up df
data_aggreg_test$cycle.max <- NULL
data_aggreg_test$RUL <- NULL
names(data_aggreg_test) <- c("Unit.number","cycle.max")
#Join dfs
data_train_rul_joined <- merge(data_train_rul,data_aggreg,by = "Unit.number")
data_test_rul_joined <- merge(data_test_rul,data_aggreg_test,by = "Unit.number")
data_train_rul <- data_train_rul_joined
data_test_rul <- data_test_rul_joined
#Create new var RUL which is max_cyle minus cycle_time to get rul
data_train_rul$RUL.in.cycles <- (data_train_rul$cycle.max - data_train_rul$Time.in.cycles)
data_test_rul$RUL.in.cycles <- (data_test_rul$cycle.max - data_test_rul$Time.in.cycles)
##LINEAR REGRESSION TEST##############################
#df-train : data_train_rul
#df-test  : data_test_rul
names(data_train_rul) <- c(varnames,"MAX.cycles","RUL.in.cycles")
names(data_test_rul) <- c(varnames,"MAX.cycles","RUL.in.cycles")
linearMod <- lm(RUL.in.cycles ~ ., data=data_train_rul[,c(6:26,28)]) #Only keep sensors and RUL
print(linearMod)
data_test_rul <- as.data.table(data_test_rul)
mm <- data_test_rul[data_test_rul[, .I[`Time in cycles` == max(`Time in cycles`)], by="Unit number"]$V1]
data_test_rul_to_predict <- mm
lm_predict <- stats::predict(linearMod,data_test_rul_to_predict[,c(6:26,28)]) #Use the stats package because rESN is masking the predict funtion. Hence a null vector will be generated (without warning)
lm_predict <- as.data.frame(lm_predict)
names(lm_predict) <- c("Predict")
#test scatter
predict_df <- cbind(data_test_rul_to_predict,lm_predict)
ggplot(predict_df,aes(x = predict_df$RUL.in.cycles, y = predict_df$Predict)) +
geom_point() +
labs(title = "Multi Var Linear Regressioin",
x = "True Remaining Useful Life",
y = "Predicted Remaining Useful Life") +
geom_abline(intercept = 0, slope = 1,colour = "blue") +
geom_smooth(span = 1)
rmse_linear <- Metrics::rmse(predict_df$RUL.in.cycles,predict_df$Predict)
#Classification of the linear model
confusion_matrix <- predict_df[,c(28:29)]
confusion_matrix$Predict <- round(confusion_matrix$Predict,2) #Round the predicted values
confusion_matrix$predict_true <- ifelse(confusion_matrix$Predict <= 50,1,0)
confusion_matrix$RUL_true <- ifelse(confusion_matrix$RUL.in.cycles <= 50,1,0)
confusion_matrix$true <- ifelse(confusion_matrix$predict_true == confusion_matrix$RUL_true,1,0)
confusion_matrix$TP <- ifelse(confusion_matrix$predict_true == confusion_matrix$RUL_true & confusion_matrix$predict_true == 1,1,0)
confusion_matrix$FP <- ifelse(confusion_matrix$predict_true == 1 & confusion_matrix$RUL_true == 0,1,0)
confusion_matrix$TN <- ifelse(confusion_matrix$predict_true == 0 & confusion_matrix$RUL_true == 0,1,0)
confusion_matrix$FN <- ifelse(confusion_matrix$predict_true == 0 & confusion_matrix$RUL_true == 1,1,0)
confusion_matrix_final <- matrix(0,nrow = 2,ncol = 2)
colnames(confusion_matrix_final) = c("Pred=T","Pred=F")
rownames(confusion_matrix_final) = c("Actual=T","Actual=F")
confusion_matrix_final[1,] <- c(sum(confusion_matrix[,"TP"]),sum(confusion_matrix[,"FN"]))
confusion_matrix_final[2,] <- c(sum(confusion_matrix[,"FP"]),sum(confusion_matrix[,"TN"]))
# VARIABLE SELECTION
linearMode.coefficients <- as.data.frame(summary(linearMod)$coefficients[])
attach(linearMode.coefficients)
#Sort data frame base on the estimate values
sortedCoef <- linearMode.coefficients[order(Estimate),]
#Only keep sensors with the highest impact
selected.sensors <- c("Sensor 15","Sensor 11","Sensor 8","Sensor 13","Sensor 2")
detach(linearMode.coefficients)
other.cols <- c("Unit number","RUL.in.cycles")
cols <- c(other.cols,selected.sensors)
data_train_rul <- subset(data_train_rul,select = cols)
#ECHO STATE NETWORK BASED MODEL
net_u <- as.matrix(data_train_rul[1:2000,c(3:7)])
net_Yt <- as.matrix(as.numeric(data_train_rul[1:2000,c(2)]))
library(EchoStateNet) #This package is masking the stats::predict function
net <- EchoStateNet::createESN(leaking.rate = 0.5,
lambda = 1.25,
n.neurons = 1000,
wash.out = 0,
feedback = FALSE,
regCoef = 0.0025,
resCon = 1,
U = net_u,
Y = net_Yt)
trained_net <- EchoStateNet::train(net)
#Only keep last vals of the cycle for prediction
to_pred <- subset(data_test_rul_to_predict,select = cols)
ypred <- EchoStateNet::predict(trained_net,
U = as.matrix(to_pred[1,c(3:7)]),
generative = TRUE,
genNum = 50)
generative
ypred <- EchoStateNet::predict(trained_net,
U = to_pred[1,c(3:7)],
generative = TRUE,
genNum = 50)
ypred
ypred <- EchoStateNet::predict(trained_net,
U = to_pred[,c(3:7)],
generative = TRUE,
genNum = 50)
ypred
ypred <- EchoStateNet::predict(trained_net,
U = to_pred[,c(3:7)],
generative = TRUE,
genNum = 100)
ypred
class(to_pred[,c(3:7)])
#Only keep last vals of the cycle for prediction
to_pred <- as.matrix(subset(data_test_rul_to_predict,select = cols))
class(to_pred[,c(3:7)])
#Only keep last vals of the cycle for prediction
to_pred <- as.matrix(subset(data_test_rul_to_predict,select = cols))
ypred <- EchoStateNet::predict(trained_net,
U = to_pred[,c(3:7)],
generative = TRUE,
genNum = 100)
devtools::install_github("matthiasadriaens/EchoStateNet")
devtools::install_github("matthiasadriaens/EchoStateNet")
ypred <- EchoStateNet::predict(trained_net,
U = to_pred[,c(3:7)],
generative = TRUE,
genNum = 100)
head(data_test_rul)
set1[['RUL']]
set1['test_RUL']
head(set1[['test_RUL']])
names(data_test_rul)
View(data_test_rul[,c("Unit number","Time in cycles","RUL.in.cycles")])
ypred <- EchoStateNet::predict(trained_net,
U = to_pred[c(1:31),c(3:7)],
generative = FALSE,
genNum = 100)
ypred
plot(ypred)
plot(ypred,type = 'l')
net_u <- as.matrix(data_train_rul[1:200,c(3:7)])
net_Yt <- as.matrix(as.numeric(data_train_rul[1:200,c(2)]))
library(EchoStateNet) #This package is masking the stats::predict function
net <- EchoStateNet::createESN(leaking.rate = 0.5,
lambda = 1.25,
n.neurons = 100,
wash.out = 0,
feedback = FALSE,
regCoef = 0.0025,
resCon = 1,
U = net_u,
Y = net_Yt)
trained_net <- EchoStateNet::train(net)
#Only keep last vals of the cycle for prediction
to_pred <- as.matrix(subset(data_test_rul_to_predict,select = cols))
ypred <- EchoStateNet::predict(trained_net,
U = to_pred[c(1:31),c(3:7)],
generative = FALSE,
genNum = 100)
ypred
plot(ypred,type = 'l')
plot(net_Yt,type = 'l')
net_u <- as.matrix(data_train_rul[1:180,c(3:7)])
net_Yt <- as.matrix(as.numeric(data_train_rul[1:180,c(2)]))
library(EchoStateNet) #This package is masking the stats::predict function
net <- EchoStateNet::createESN(leaking.rate = 0.5,
lambda = 1.25,
n.neurons = 100,
wash.out = 0,
feedback = FALSE,
regCoef = 0.0025,
resCon = 1,
U = net_u,
Y = net_Yt)
trained_net <- EchoStateNet::train(net)
#Only keep last vals of the cycle for prediction
to_pred <- as.matrix(subset(data_test_rul_to_predict,select = cols))
ypred <- EchoStateNet::predict(trained_net,
U = to_pred[c(1:31),c(3:7)],
generative = FALSE,
genNum = 100)
ypred
plot(ypred,type = 'l')
net_u <- as.matrix(data_train_rul[1:180,c(3:7)])
net_Yt <- as.matrix(as.numeric(data_train_rul[1:180,c(2)]))
library(EchoStateNet) #This package is masking the stats::predict function
net <- EchoStateNet::createESN(leaking.rate = 0.5,
lambda = 1.25,
n.neurons = 100,
wash.out = 40,
feedback = FALSE,
regCoef = 0.0025,
resCon = 1,
U = net_u,
Y = net_Yt)
trained_net <- EchoStateNet::train(net)
#Only keep last vals of the cycle for prediction
to_pred <- as.matrix(subset(data_test_rul_to_predict,select = cols))
ypred <- EchoStateNet::predict(trained_net,
U = to_pred[c(1:31),c(3:7)],
generative = FALSE,
genNum = 100)
ypred
plot(ypred,type = 'l')
net_u <- as.matrix(data_train_rul[1:180,c(3:7)])
net_Yt <- as.matrix(as.numeric(data_train_rul[1:180,c(2)]))
library(EchoStateNet) #This package is masking the stats::predict function
net <- EchoStateNet::createESN(leaking.rate = 0.5,
lambda = 1.25,
n.neurons = 100,
wash.out = 10,
feedback = FALSE,
regCoef = 0.0025,
resCon = 1,
U = net_u,
Y = net_Yt)
trained_net <- EchoStateNet::train(net)
#Only keep last vals of the cycle for prediction
to_pred <- as.matrix(subset(data_test_rul_to_predict,select = cols))
ypred <- EchoStateNet::predict(trained_net,
U = to_pred[c(1:31),c(3:7)],
generative = FALSE,
genNum = 100)
plot(ypred,type = 'l')
net_u <- as.matrix(data_train_rul[1:5000,c(3:7)])
net_Yt <- as.matrix(as.numeric(data_train_rul[1:5000,c(2)]))
library(EchoStateNet) #This package is masking the stats::predict function
net <- EchoStateNet::createESN(leaking.rate = 0.5,
lambda = 1.25,
n.neurons = 100,
wash.out = 100,
feedback = FALSE,
regCoef = 0.0025,
resCon = 1,
U = net_u,
Y = net_Yt)
trained_net <- EchoStateNet::train(net)
#Only keep last vals of the cycle for prediction
to_pred <- as.matrix(subset(data_test_rul_to_predict,select = cols))
ypred <- EchoStateNet::predict(trained_net,
U = to_pred[c(1:31),c(3:7)],
generative = FALSE,
genNum = 100)
plot(ypred,type = 'l')
ypred <- EchoStateNet::predict(trained_net,
U = to_pred[c(32:60),c(3:7)],
generative = FALSE,
genNum = 100)
plot(ypred,type = 'l')
devtools::install_github("jaredhuling/rESN")
library(rESN)
library(rESN)
net <- rESN::newESN(net_Yt,
net_u,
n.neurons = 1000,
density = 0.02,
back.density = 0.02,
leak.rate = 0.6,
lambda = 10)
net <- rESN::train(net)
ypred <- rESN::predict(net, u = to_pred[c(32:60),c(3:7)])
ypred
ypred <- rESN::predict(net, u = as.matrix(to_pred[c(32:60),c(3:7)]))
ypred
l
net <- rESN::newESN(net_Yt,
net_u,
n.neurons = 100,
density = 0.02,
back.density = 0.02,
leak.rate = 0.6,
lambda = )
net <- rESN::train(net)
ypred <- rESN::predict(net, u = as.matrix(to_pred[c(32:60),c(3:7)]))
ypred
net <- rESN::newESN(net_Yt,
net_u,
n.neurons = 100,
density = 1,
back.density = 0,
leak.rate = 0.6,
lambda = )
net <- rESN::train(net)
ypred <- rESN::predict(net, u = as.matrix(to_pred[c(32:60),c(3:7)]))
ypred
devtools::install_github("jaredhuling/rESN")
library(rESN)
net <- rESN::newESN(net_Yt,
net_u,
n.neurons = 100,
density = 1,
back.density = 0,
leak.rate = 0.6,
lambda = )
net <- rESN::train(net)
ypred <- rESN::predict(net, u = as.matrix(to_pred[c(1:31),c(3:7)]))
ypred
l
net <- rESN::newESN(net_Yt,
net_u,
n.neurons = 100,
density = 1,
back.density = 0,
leak.rate = 0.6,
lambda = 0.001)
net <- rESN::train(net)
ypred <- rESN::predict(net, u = as.matrix(to_pred[c(1:31),c(3:7)]))
ypred
plot(net_Yt,type = 'l')
devtools::install_github("matthiasadriaens/EchoStateNet")
#ECHO STATE NETWORK BASED MODEL
net_u <- as.matrix(data_train_rul[1:5000,c(3:7)])
net_Yt <- as.matrix(as.numeric(data_train_rul[1:5000,c(2)]))
library(EchoStateNet) #This package is masking the stats::predict function
net <- EchoStateNet::createESN(leaking.rate = 0.5,
lambda = 1.25,
n.neurons = 100,
wash.out = 100,
feedback = FALSE,
regCoef = 0.0025,
resCon = 1,
U = net_u,
Y = net_Yt)
trained_net <- EchoStateNet::train(net)
#Only keep last vals of the cycle for prediction
to_pred <- as.matrix(subset(data_test_rul_to_predict,select = cols))
ypred <- EchoStateNet::predict(trained_net,
U = to_pred[c(32:60),c(3:7)],
generative = FALSE,
genNum = 100)
plot(ypred,type = 'l')
devtools::install_github("matthiasadriaens/EchoStateNet")
#ECHO STATE NETWORK BASED MODEL
net_u <- as.matrix(data_train_rul[1:5000,c(3:7)])
net_Yt <- as.matrix(as.numeric(data_train_rul[1:5000,c(2)]))
library(EchoStateNet) #This package is masking the stats::predict function
net <- EchoStateNet::createESN(leaking.rate = 0.5,
lambda = 1.25,
n.neurons = 100,
wash.out = 100,
feedback = FALSE,
regCoef = 0.0025,
resCon = 1,
U = net_u,
Y = net_Yt)
trained_net <- EchoStateNet::train(net)
#Only keep last vals of the cycle for prediction
to_pred <- as.matrix(subset(data_test_rul_to_predict,select = cols))
ypred <- EchoStateNet::predict(trained_net,
U = to_pred[c(32:60),c(3:7)],
generative = FALSE,
genNum = 100)
plot(ypred,type = 'l')
head(to_pred)
dim(set1[["test"]])
data.test.raw <- subset(set1[["test"]],select = cols)
cols
data.test.raw <- subset(set1[["test"]], select = cols)
names(set1[["test"]])
cols
cols[-c("Unit number","RUL.in.cycles")]
cols[-c("Unit number")]
cols[- c("Unit number")]
cols
cols[-c(1)]
cols[-c(1,2)]
data.test.raw <- subset(set1[["test"]], select = cols[-c(1,2)])
names(set1["test"])
names(set1[["test"]])
cols
############
data.test.raw <- subset(set1[["test"]], select = c("Sensor.15","Sensor.11","Sensor.8","Sensor.13","Sensor.2"))
dim(data.test.raw)
head(data.test.raw)
data.test.raw <- as.matrix(data.test.raw)l
data.test.raw <- as.matrix(data.test.raw)
class(data.test.raw)
data.test.raw
data.test.raw[c(1:32)]
data.test.raw[c(1:32),]
data.test.raw[c(1:33),]
##ALternative direct prediction ->  to_pred[c(32:60),c(3:7)],
ypred <- EchoStateNet::predict(trained_net,
U = data.test.raw[c(1:31,)],
generative = FALSE,
genNum = 100)
##ALternative direct prediction ->  to_pred[c(32:60),c(3:7)],
ypred <- EchoStateNet::predict(trained_net,
U = data.test.raw[c(1:31),],
generative = FALSE,
genNum = 100)
ypred
plot(ypred,type = 'l')
cols
matthias.2 <- "sdf"
matthias.2
names(net_u)
head(net_u)
net_u[,c("Sensor 2")]
head(net_u)
dim(c(netu_u[1,c("Sensor 2")],net_u[,c("Sensor 2")]))
dim(c(net_u[1,c("Sensor 2")],net_u[,c("Sensor 2")]))
lenght(c(net_u[1,c("Sensor 2")],net_u[,c("Sensor 2")]))
length(c(net_u[1,c("Sensor 2")],net_u[,c("Sensor 2")]))
#MODEL SENSOR 2
net.sesor.2 <- EchoStateNet::createESN(leaking.rate = 0.5,
lambda = 1.25,
n.neurons = 100,
wash.out = 100,
feedback = FALSE,
regCoef = 0.0025,
resCon = 1,
U = as.matrix(net_u[,c("Sensor 2")]),
Y = as.matrix(c(net_u[1,c("Sensor 2")],net_u[,c("Sensor 2")])))
net.trained.sensor.2 <- EchoStateNet::train(net.sesor.2)
#MODEL SENSOR 2
net.sesor.2 <- EchoStateNet::createESN(leaking.rate = 0.5,
lambda = 1.25,
n.neurons = 100,
wash.out = 100,
feedback = FALSE,
regCoef = 0.0025,
resCon = 1,
U = as.matrix(net_u[,c("Sensor 2")]),
Y = as.matrix(c(net_u[1,c("Sensor 2")],net_u[1:(nrow(net_u)-1),c("Sensor 2")])))
net.trained.sensor.2 <- EchoStateNet::train(net.sesor.2)
ypred <- EchoStateNet::predict(net.trained.sensor.2,
U = data.test.raw[c(1:31),c("Sensor.2")],
generative = TRUE,
genNum = 100)
ypred
ypred <- EchoStateNet::predict(net.trained.sensor.2,
U = as.matrix(data.test.raw[c(1:31),c("Sensor.2")]),
generative = TRUE,
genNum = 100)
ypred
plot(ypred,type = 'l')
install.packages("rcpp")
library(rcpp)
install.packages("Rcpp")
install.packages("Rcpp")
library(Rcpp)
.Call?
`\\\`
)
))
asdf
.Call()?
???
?.Call
matthi()
matthi <- function(){
output <- .Call("Matthias",PACKAGE = "EchoStateNet")
}
matthi()
Rcpp.package.skeleton("EchoStateNet")
getwd()
Rcpp.package.skeleton("EchoStateNet")
Rcpp.package.skeleton("EchoStateNet")
Rcpp.package.skeleton("EchoStateNet")
#include <Rcpp.h>
using namespace Rcpp;
// This is a simple example of exporting a C++ function to R. You can
// source this function into an R session using the Rcpp::sourceCpp
// function (or via the Source button on the editor toolbar). Learn
// more about Rcpp at:
//
//   http://www.rcpp.org/
//   http://adv-r.had.co.nz/Rcpp.html
//   http://gallery.rcpp.org/
//
// [[Rcpp::export]]
NumericVector timesTwo(NumericVector x) {
return x * 2;
}
// You can include R code blocks in C++ files processed with sourceCpp
// (useful for testing and development). The R code will be automatically
// run after the compilation.
//
/*** R
timesTwo(42)
*/
library(EchoStateNet)
matthi(10)
library(EchoStateNet)
matthi(10)
matthi()
library(EchoStateNet)
matthi()
Rcpp.package.skeleton("mypack")
getwd()
getwd()
setwd("C:\Users\matth\OneDrive\Desktop\thesis\final_pack")
setwd("C:/Users/matth/OneDrive/Desktop/thesis/final_pack")
library(Rcpp)
Rcpp.package.skeleton("EchoStateNets")
